Basic format string attack that prints a secret off the stack by reading arbitrary memory.

1. Compile vulnerable program:
   * gcc -g -mpreferred-stack-boundary=2 fsa.c -o fsa
2. Run vulnerable program with unsanitised format string arg:
   * ./fsa %s 

How this works:
   * The input argument argv[1] is not sanitized and it's passed directly to printf
   * For each format string specifier, printf reads memory off the stack, in the order they're specified
   * Since no arguments were passed to printf, it reads the subsequent memory locations of the stack until it finds a      null terminator to indicate the end of the string (%s)
   * Since we put a string on the stack before our call to printf, said string is printed via printf
